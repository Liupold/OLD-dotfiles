set undodir=$XDG_DATA_HOME/vim/undo
set directory=$XDG_DATA_HOME/vim/swap
set backupdir=$XDG_DATA_HOME/vim/backup
set viewdir=$XDG_DATA_HOME/vim/view
set runtimepath=$XDG_CONFIG_HOME/vim,$VIMRUNTIME,$XDG_CONFIG_HOME/vim/after

" Some Basic autocmd
set laststatus=2
set timeoutlen=300
set number
set relativenumber
set guifont="Fira Code 10"
set nocompatible
set viminfo+='1000,n$XDG_DATA_HOME/vim/viminfo
set expandtab
set tabstop=4
set t_Co=256

" ----------------------------------------------------------
" BASIC

filetype plugin on
syntax on
"colorscheme gruvbox
colorscheme molokai
set path+=**
set wildmode=longest,list,full
set splitright
set splitbelow

if !has('nvim')
        set ttymouse=xterm2
endif

 if exists(':tnoremap')
        tnoremap <Esc> <C-\><C-n>
endif

" ----------------------------------------------------------
" PLUGINs
if empty(glob('$XDG_DATA_HOME/vim/plugged'))
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
            \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
            autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('$XDG_DATA_HOME/vim/plugged')
Plug 'junegunn/vim-easy-align'
Plug 'kovetskiy/sxhkd-vim'
Plug 'VebbNix/lf-vim'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'preservim/nerdtree'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'lervag/vimtex'
Plug 'neoclide/coc-python', {'do': 'yarn install --frozen-lockfile'}
Plug 'neoclide/coc-vimtex', {'do': 'yarn install --frozen-lockfile'}
call plug#end()
let g:airline_powerline_fonts = 1
let g:airline_theme='term'

" ----------------------------------------------------------
" KeyMapings
let mapleader =","

" custom make script
noremap <F6> :set spell! spelllang=en_us<CR>
noremap <leader><leader> <Esc><Esc>:w<CR>
noremap <leader>q :q<CR>

noremap <leader>e :e
nnoremap <leader>t :tabedit<CR>
nnoremap <leader>v :tabprevious<CR>
nnoremap <leader>b :tabnext<CR>

nnoremap <Down> :resize -1<CR>
nnoremap <Up> :resize +1<CR>
nnoremap <Left> :vertical resize +1<CR>
nnoremap <Right> :vertical resize -1<CR>

inoremap <leader><leader> <Esc><ESc>:w<CR>
inoremap <leader><Space> <Esc><Esc>/<CR>"_c4l


" ----------------------------------------------------------
" Shortcutting split navigation, saving a keypress:
	map <C-h> <C-w>h
	map <C-j> <C-w>j
	map <C-l> <C-w>l
	map <C-k> <C-w>k

" ----------------------------------------------------------
" Copy And Paste

    " diffent clip for delete cmds
    noremap dd "bdd
    noremap dw "bdw
    vnoremap dw "bdw
    vnoremap dd "bdd
    noremap pd "bp

" ----------------------------------------------------------
" Some Basic autocmd
	autocmd BufWritePre * %s/\s\+$//e

" ----------------------------------------------------------
" LaTex
	autocmd BufReadPre *.tex noremap <F5> :!latexrun.py  --clean-all "%"<CR>

" ----------------------------------------------------------
" Python autocmd
	autocmd BufReadPre *.py nnoremap <F5> :CocCommand python.execInTerminal<CR>

" ----------------------------------------------------------
" coc nvim
set updatetime=300

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

